@page "/superheroes"
@inject ISuperHeroService  SuperHeroService
@inject NavigationManager NavigationManager
@implements IDisposable

<h3>Super Heroes</h3>

@if(SuperHeroService.Heroes.Count == 0)
{
    <span> Loading Super Heroes... </span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>FirstName</th>
                <th>LastName</th>
                <th>HeroName</th>
                <th>Comic</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var hero in SuperHeroService.Heroes)
            {
            <tr>
                <td>@hero.FirstName</td>
                <td>@hero.LastName</td>
                <td>@hero.HeroName</td>
                <td>@hero.Comic.Name</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowHero(hero.Id))">Show</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowHero(hero.Id))">Edit</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

<EditSuperHero></EditSuperHero>

@code {
    //List<SuperHero> heroes = new List<SuperHero>();

    protected override async Task OnInitializedAsync()
    {
        await SuperHeroService.GetSuperHeroes();
        SuperHeroService.Onchange += StateHasChanged;
    }

    void ShowHero(int id)
    {
        NavigationManager.NavigateTo($"superhero/{id}");
    }

    void EditHero()
    {
        // TODO: stopped here
    }

    public void Dispose()
    {
        SuperHeroService.Onchange -= StateHasChanged;
    }

}
